// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transpiles ES2020+ syntax given {"targets":"last 2 Chrome versions"}: input 1`] = `
import defaultImport, {namedImport} from 'foo'
import * as namespaceImport from 'bar'

const dynamicImport = import('baz')

class Foo {
  static bar = 'abc'
  baz = (x, y) => x({...y})
}

const obj = {a: 1, b: 2}

const spread = {...obj, b: 2, c: 3}
const {a, ...rest} = spread

const nullishCoalescing = obj ?? 1
const optionalChaining = obj?.b

export default obj
export {obj}

`;

exports[`transpiles ES2020+ syntax given {"targets":"last 2 Chrome versions"}: output (production) 1`] = `
import defaultImport, { namedImport } from 'foo';
import * as namespaceImport from 'bar';
const dynamicImport = import('baz');

class Foo {
  constructor() {
    this.baz = (x, y) => x({ ...y
    });
  }

}

Foo.bar = 'abc';
const obj = {
  a: 1,
  b: 2
};
const spread = { ...obj,
  b: 2,
  c: 3
};
const {
  a,
  ...rest
} = spread;
const nullishCoalescing = obj != null ? obj : 1;
const optionalChaining = obj == null ? void 0 : obj.b;
export default obj;
export { obj };
`;

exports[`transpiles ES2020+ syntax given {"targets":"last 2 Chrome versions"}: output (production-modern) 1`] = `
import defaultImport, { namedImport } from 'foo';
import * as namespaceImport from 'bar';
const dynamicImport = import('baz');

class Foo {
  constructor() {
    this.baz = (x, y) => x({ ...y
    });
  }

}

Foo.bar = 'abc';
const obj = {
  a: 1,
  b: 2
};
const spread = { ...obj,
  b: 2,
  c: 3
};
const {
  a,
  ...rest
} = spread;
const nullishCoalescing = obj != null ? obj : 1;
const optionalChaining = obj == null ? void 0 : obj.b;
export default obj;
export { obj };
`;

exports[`transpiles ES2020+ syntax given {}: input 1`] = `
import defaultImport, {namedImport} from 'foo'
import * as namespaceImport from 'bar'

const dynamicImport = import('baz')

class Foo {
  static bar = 'abc'
  baz = (x, y) => x({...y})
}

const obj = {a: 1, b: 2}

const spread = {...obj, b: 2, c: 3}
const {a, ...rest} = spread

const nullishCoalescing = obj ?? 1
const optionalChaining = obj?.b

export default obj
export {obj}

`;

exports[`transpiles ES2020+ syntax given {}: output (production) 1`] = `
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import defaultImport, { namedImport } from 'foo';
import * as namespaceImport from 'bar';
var dynamicImport = import('baz');

var Foo = function Foo() {
  this.baz = function (x, y) {
    return x(Object.assign({}, y));
  };
};

Foo.bar = 'abc';
var obj = {
  a: 1,
  b: 2
};
var spread = Object.assign({}, obj, {
  b: 2,
  c: 3
});

var a = spread.a,
    rest = _objectWithoutPropertiesLoose(spread, ["a"]);

var nullishCoalescing = obj != null ? obj : 1;
var optionalChaining = obj == null ? void 0 : obj.b;
export default obj;
export { obj };
`;

exports[`transpiles ES2020+ syntax given {}: output (production-modern) 1`] = `
import defaultImport, { namedImport } from 'foo';
import * as namespaceImport from 'bar';
const dynamicImport = import('baz');

class Foo {
  constructor() {
    this.baz = (x, y) => x({ ...y
    });
  }

}

Foo.bar = 'abc';
const obj = {
  a: 1,
  b: 2
};
const spread = { ...obj,
  b: 2,
  c: 3
};
const {
  a,
  ...rest
} = spread;
const nullishCoalescing = obj != null ? obj : 1;
const optionalChaining = obj == null ? void 0 : obj.b;
export default obj;
export { obj };
`;
